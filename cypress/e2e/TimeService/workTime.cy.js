import { user, pass, login, setToken } from "../utils/auth"
import { makeText, makeRuName } from "../utils/func";

it("Start", () => {
    login(user.nik, pass.nik)
});

describe("addEditWorkTime", () => {

    beforeEach(setToken)

    it("DOW-7", () => {
        cy.url()                                        //checking the desired tab
            .should('eq', 'https://dev.digital-office.dso.lanit-tercom.com/time')
        cy.intercept('PATCH', '/worktime/edit*')
            .as('wt-edited')
        cy.get('mat-select[data-test*="month"]')
            .should('have.class', 'ng-star-inserted')   //checking the default insertion of the month
        cy.get('mat-select[formcontrolname="project"]')
            .click()
        cy.get('mat-option')
            .should('have.length.greaterThan', 1)       //checking that the user has projects in list
            .its('length')
            .then(lenght => {
                let l = lenght;
                cy.log(l)                               //number of projects found
                let k = Cypress._.random(0, l - 2)      //-2, subtract the array number and "other"
                cy.log(k)                               //shows the random number of project
                cy.get('mat-option')
                    .eq(k)
                    .click()
            })
        cy.get('input[formcontrolname="time"]')
            .clear()
            .type(Cypress._.random(1, 150))
        cy.get('do-add-work-time-hours > div[class*="form"]')
            .should('have.class', 'ng-valid')
        cy.get('button[data-test*="save"]')
            .should('be.visible')
            .click()
        cy.wait('@wt-edited')
            .its('response.statusCode').should('eq', 200)
    });

    it("DOW-8", () => {
        cy.url()
            .should('eq', 'https://dev.digital-office.dso.lanit-tercom.com/time')
        cy.intercept('PATCH', '/worktime/edit*')
            .as('wt-edited')
        cy.get('mat-select[data-test*="month"]')
            .should('have.class', 'ng-star-inserted')
        cy.get('mat-select[formcontrolname="project"]')
            .click()
        cy.get('mat-option')
            .should('have.length.greaterThan', 1)
            .its('length')
            .then(lenght => {
                let l = lenght;
                cy.log(l)
                let k = Cypress._.random(0, l - 2)
                cy.log(k)
                cy.get('mat-option')
                    .eq(k)
                    .click()
            })
        cy.get('input[formcontrolname="time"]')
            .clear()
            .type(Cypress._.random(1, 150))
        cy.get('textarea[formcontrolname="comment"]')
            .should('have.attr', 'maxlength')
            .and('eq', '500')      //valid comment length check
        cy.get('textarea[formcontrolname="comment"]')
            .clear()
            .type(makeText(50))
        cy.get('do-add-work-time-hours > div[class*="form"]')
            .should('have.class', 'ng-valid')
        cy.get('button[data-test*="save"]')
            .should('be.visible')
            .click()
        cy.wait('@wt-edited')
            .its('response.statusCode').should('eq', 200)
    });

    it("DOW-9", () => {
        cy.url()
            .should('eq', 'https://dev.digital-office.dso.lanit-tercom.com/time')
        cy.intercept('PATCH', '/worktime/edit*')
            .as('wt-edited')
        cy.get('mat-select[data-test*="month"]')
            .should('have.class', 'ng-star-inserted')
        cy.get('mat-select[formcontrolname="project"]')
            .click()
        cy.get('mat-option')
            .should('have.length.greaterThan', 1)
            .its('length')
            .then(lenght => {
                let l = lenght;
                cy.log(l)
                let k = Cypress._.random(0, l - 2)
                cy.log(k)
                cy.get('mat-option')
                    .eq(k)
                    .click()
            })
        cy.get('input[formcontrolname="time"]')
            .clear()
            .type('0')
        cy.get('do-add-work-time-hours > div[class*="form"]')
            .should('have.class', 'ng-valid')
        cy.get('button[data-test*="save"]')
            .should('be.visible')
            .click()
        cy.wait('@wt-edited')
            .its('response.statusCode').should('eq', 200)
    });

    it("DOW-10", () => {
        cy.url()
            .should('eq', 'https://dev.digital-office.dso.lanit-tercom.com/time')
        cy.intercept('PATCH', '/worktime/edit*')
            .as('wt-edited')
        cy.get('mat-select[data-test*="month"]')
            .should('have.class', 'ng-star-inserted')
        cy.get('mat-select[formcontrolname="project"]')
            .click()
        cy.get('mat-option')
            .should('have.length.greaterThan', 1)
            .its('length')
            .then(lenght => {
                let l = lenght;
                cy.log(l)
                let k = Cypress._.random(0, l - 2)
                cy.log(k)
                cy.get('mat-option')
                    .eq(k)
                    .click()
            })
        cy.get('input[formcontrolname="time"]')
            .clear()
            .type('1')
        cy.get('do-add-work-time-hours > div[class*="form"]')
            .should('have.class', 'ng-valid')
        cy.get('button[data-test*="save"]')
            .should('be.visible')
            .click()
        cy.wait('@wt-edited')
            .its('response.statusCode').should('eq', 200)
    });

    it("DOW-11", () => {
        cy.url()
            .should('eq', 'https://dev.digital-office.dso.lanit-tercom.com/time')
        cy.intercept('PATCH', '/worktime/edit*')
            .as('wt-edited')
        cy.get('mat-select[data-test*="month"]')
            .should('have.class', 'ng-star-inserted')
        cy.get('mat-select[formcontrolname="project"]')
            .click()
        cy.get('mat-option')
            .should('have.length.greaterThan', 1)
            .its('length')
            .then(lenght => {
                let l = lenght;
                cy.log(l)
                let k = Cypress._.random(0, l - 2)
                cy.log(k)
                cy.get('mat-option')
                    .eq(k)
                    .click()
            })
        cy.get('input[formcontrolname="time"]')
            .clear()
            .type('744')
        cy.get('do-add-work-time-hours > div[class*="form"]')
            .should('have.class', 'ng-valid')
        cy.get('button[data-test*="save"]')
            .should('be.visible')
            .click()
        cy.wait('@wt-edited')
            .its('response.statusCode').should('eq', 200)
    });

    it("DOW-12", () => {
        cy.url()
            .should('eq', 'https://dev.digital-office.dso.lanit-tercom.com/time')
        cy.get('mat-select[data-test*="month"]')
            .should('have.class', 'ng-star-inserted')
        cy.get('mat-select[formcontrolname="project"]')
            .click()
        cy.get('mat-option')
            .should('have.length.greaterThan', 1)
            .its('length')
            .then(lenght => {
                let l = lenght;
                cy.log(l)
                let k = Cypress._.random(0, l - 2)
                cy.log(k)
                cy.get('mat-option')
                    .eq(k)
                    .click()
            })
        cy.get('input[formcontrolname="time"]')
            .clear()
            .type(Cypress._.random(745, 9999))
        cy.get('do-add-work-time-hours > div[class*="form"]')
            .should('have.class', 'ng-invalid')
        cy.get('button[data-test*="save"]')
            .should('be.visible')
            .click()
        cy.get('do-form-field[label="Количество часов"] mat-error')
            .scrollIntoView()
            .should('be.visible')                                       //error message visibility check
        cy.get('do-form-field[label="Количество часов"] mat-error')
            .invoke('prop', 'innerText')
            .should('eq', 'Максимальное значение: 744')                 //message text check
        cy.reload().wait(200)                                           //waiting after reload improves the stability
    });

    it("DOW-13", () => {
        cy.url()
            .should('eq', 'https://dev.digital-office.dso.lanit-tercom.com/time')
        cy.get('mat-select[data-test*="month"]')
            .should('have.class', 'ng-star-inserted')
        cy.get('mat-select[formcontrolname="project"]')
            .click()
        cy.get('mat-option')
            .should('have.length.greaterThan', 1)
            .its('length')
            .then(lenght => {
                let l = lenght;
                cy.log(l)
                let k = Cypress._.random(0, l - 2)
                cy.log(k)
                cy.get('mat-option')
                    .eq(k)
                    .click()
            })
        cy.get('input[formcontrolname="time"]')
            .clear()
            .type(makeRuName(10))
        cy.get('input[formcontrolname="time"]')
            .invoke('val')
            .should('eq', '')                                    //checking that the field is not filled with invalid characters
        cy.get('do-add-work-time-hours > div[class*="form"]')
            .should('have.class', 'ng-invalid')
        cy.get('button[data-test*="save"]')
            .should('be.visible')
            .click()
        cy.get('do-form-field[label="Количество часов"] mat-error')
            .scrollIntoView()
            .should('be.visible')
        cy.get('do-form-field[label="Количество часов"] mat-error')
            .invoke('prop', 'innerText')
            .should('eq', 'Обязательно для заполнения')
        cy.reload().wait(200)
    });

    it("DOW-14-16", () => {
        cy.url()
            .should('eq', 'https://dev.digital-office.dso.lanit-tercom.com/time')
        cy.get('mat-select[data-test*="month"]')
            .should('have.class', 'ng-star-inserted')
        cy.get('mat-select[formcontrolname="project"]')
            .click()
        cy.get('mat-option')
            .should('have.length.greaterThan', 1)
            .its('length')
            .then(lenght => {
                let l = lenght;
                cy.log(l)
                let k = Cypress._.random(0, l - 2)
                cy.log(k)
                cy.get('mat-option')
                    .eq(k)
                    .click()
            })
        cy.get('input[formcontrolname="time"]')
            .clear()
            .type('!$@%^$^@(&*(+_~')
        cy.get('input[formcontrolname="time"]')
            .invoke('val')
            .should('eq', '')                                     //checking that the field is not filled with invalid characters
        cy.get('do-add-work-time-hours > div[class*="form"]')
            .should('have.class', 'ng-invalid')
        cy.get('button[data-test*="save"]')
            .should('be.visible')
            .click()
        cy.get('do-form-field[label="Количество часов"] mat-error')
            .scrollIntoView()
            .should('be.visible')
        cy.get('do-form-field[label="Количество часов"] mat-error')
            .invoke('prop', 'innerText')
            .should('eq', 'Обязательно для заполнения')
        cy.reload().wait(200)
    });

    it("DOW-15", () => {
        cy.url()
            .should('eq', 'https://dev.digital-office.dso.lanit-tercom.com/time')
        cy.get('mat-select[data-test*="month"]')
            .should('have.class', 'ng-star-inserted')
        cy.get('mat-select[formcontrolname="project"]')
            .should('have.class', 'mat-select-empty')
        cy.get('input[formcontrolname="time"]')
            .invoke('val')
            .should('eq', '')
        cy.get('textarea[formcontrolname="comment"]')
            .invoke('val')
            .should('eq', '')
        cy.get('do-add-work-time-hours > div[class*="form"]')
            .should('have.class', 'ng-invalid')
        cy.get('button[data-test*="save"]')
            .click()
        cy.get('do-form-field[label="Проект"] mat-error')
            .scrollIntoView()
            .should('be.visible')
        cy.get('do-form-field[label="Проект"] mat-error')
            .invoke('prop', 'innerText')
            .should('eq', 'Обязательно для заполнения')
        cy.get('do-form-field[label="Количество часов"] mat-error')
            .scrollIntoView()
            .should('be.visible')
        cy.get('do-form-field[label="Количество часов"] mat-error')
            .invoke('prop', 'innerText')
            .should('eq', 'Обязательно для заполнения')
        cy.reload().wait(200)
    });

    it("DOW-17", () => {
        cy.url()
            .should('eq', 'https://dev.digital-office.dso.lanit-tercom.com/time')
        cy.get('mat-select[data-test*="month"]')
            .should('have.class', 'ng-star-inserted')
        cy.get('mat-select[formcontrolname="project"]')
            .invoke('prop', 'textContent')
            .should('eq', 'Выберите проект')
        cy.get('input[formcontrolname="time"]')
            .clear()
            .type(Cypress._.random(1, 150))
        cy.get('do-add-work-time-hours > div[class*="form"]')
            .should('have.class', 'ng-invalid')
        cy.get('button[data-test*="save"]')
            .should('be.visible')
            .click()
        cy.get('do-form-field[label="Проект"] mat-error')
            .scrollIntoView()
            .should('be.visible')
        cy.get('do-form-field[label="Проект"] mat-error')
            .invoke('prop', 'innerText')
            .should('eq', 'Обязательно для заполнения')
        cy.reload().wait(200)
    });

    it("DOW-18", () => {
        cy.url()
            .should('eq', 'https://dev.digital-office.dso.lanit-tercom.com/time')
        cy.intercept('PATCH', '/worktime/edit*')
            .as('wt-edited')
        cy.get('mat-select[data-test*="month"]')
            .should('have.class', 'ng-star-inserted')
        cy.get('mat-select[formcontrolname="project"]')
            .click()
        cy.get('mat-option')
            .should('have.length.greaterThan', 1)
            .its('length')
            .then(lenght => {
                let l = lenght;
                cy.log(l)
                let k = Cypress._.random(0, l - 2)
                cy.log(k)
                cy.get('mat-option')
                    .eq(k)
                    .click()
            })
        cy.get('input[formcontrolname="time"]')
            .clear()
            .type(Cypress._.random(1, 150))
        cy.get('textarea[formcontrolname="comment"]')
            .should('have.attr', 'maxlength')
            .and('eq', '500')
        cy.get('textarea[formcontrolname="comment"]')
            .clear()
            .type(makeText(1))
        cy.get('do-add-work-time-hours > div[class*="form"]')
            .should('have.class', 'ng-valid')
        cy.get('button[data-test*="save"]')
            .should('be.visible')
            .click()
        cy.wait('@wt-edited')
            .its('response.statusCode').should('eq', 200)
    });

    it("DOW-19", () => {
        cy.url()
            .should('eq', 'https://dev.digital-office.dso.lanit-tercom.com/time')
        cy.intercept('PATCH', '/worktime/edit*')
            .as('wt-edited')
        cy.get('mat-select[data-test*="month"]')
            .should('have.class', 'ng-star-inserted')
        cy.get('mat-select[formcontrolname="project"]')
            .click()
        cy.get('mat-option')
            .should('have.length.greaterThan', 1)
            .its('length')
            .then(lenght => {
                let l = lenght;
                cy.log(l)
                let k = Cypress._.random(0, l - 2)
                cy.log(k)
                cy.get('mat-option')
                    .eq(k)
                    .click()
            })
        cy.get('input[formcontrolname="time"]')
            .clear()
            .type(Cypress._.random(1, 150))
        cy.get('textarea[formcontrolname="comment"]')
            .should('have.attr', 'maxlength')
            .and('eq', '500')
        cy.get('textarea[formcontrolname="comment"]')
            .clear()
            .type(makeText(500))
        cy.get('textarea[formcontrolname="comment"]')
            .invoke('prop', 'textLength')
            .should('eq', 500)
        cy.get('do-add-work-time-hours > div[class*="form"]')
            .should('have.class', 'ng-valid')
        cy.get('button[data-test*="save"]')
            .should('be.visible')
            .click()
        cy.wait('@wt-edited')
            .its('response.statusCode').should('eq', 200)
    });

    it("DOW-20", () => {
        cy.url()
            .should('eq', 'https://dev.digital-office.dso.lanit-tercom.com/time')
        cy.intercept('PATCH', '/worktime/edit*')
            .as('wt-edited')
        cy.get('mat-select[data-test*="month"]')
            .should('have.class', 'ng-star-inserted')
        cy.get('mat-select[formcontrolname="project"]')
            .click()
        cy.get('mat-option')
            .should('have.length.greaterThan', 1)
            .its('length')
            .then(lenght => {
                let l = lenght;
                cy.log(l)
                let k = Cypress._.random(0, l - 2)
                cy.log(k)
                cy.get('mat-option')
                    .eq(k)
                    .click()
            })
        cy.get('input[formcontrolname="time"]')
            .clear()
            .type(Cypress._.random(1, 99))
        cy.get('textarea[formcontrolname="comment"]')
            .should('have.attr', 'maxlength')
            .and('eq', '500')
        cy.get('textarea[formcontrolname="comment"]')
            .clear()
            .type(makeText(Cypress._.random(501, 600)))
        cy.get('textarea[formcontrolname="comment"]')
            .invoke('prop', 'textLength')
            .should('eq', 500)                                      //character limit check
        cy.get('do-add-work-time-hours > div[class*="form"]')
            .should('have.class', 'ng-valid')
        cy.get('button[data-test*="save"]')
            .should('be.visible')
            .click()
        cy.wait('@wt-edited')
            .its('response.statusCode').should('eq', 200)
    });

    it("DOW-21", () => {    //this case only works with a certain design version!
        cy.url()
            .should('eq', 'https://dev.digital-office.dso.lanit-tercom.com/time')
        cy.get('do-projects table tr')
            .should('have.length.greaterThan', 1)       //checking that the timetable has more rexords than just a header row
        cy.get('do-projects table td')
            .eq(0)
            .invoke('prop', 'textContent')              //take the PROJECT NAME cell from the first row
            .then((text1) => {
                cy.get('mat-select[formcontrolname="project"]')
                    .click()
                cy.get('mat-option')
                    .contains(text1)                    //and select it in the form
                    .click()
            })
        cy.get('do-projects table td')
            .eq(1)                                      //take the HOURS cell for this project
            .invoke('prop', 'textContent')
            .then((text2) => {
                cy.get('input[formcontrolname="time"]')
                    .invoke('val')
                    .should('eq', text2)                //compare them with the hours in the form
            })
        cy.get('do-projects table td')
            .eq(3)
            .find('do-comment p')                                      //take the COMMENT cell
            .invoke('prop', 'textContent')
            .then((text3) => {
                cy.get('textarea[formcontrolname="comment"]')
                    .invoke('val')
                    .should('eq', text3)                //compare them with the comment in the form
            })

    });


    it("DOW-24", () => {    //this case only works with a certain design version!
        cy.url()
            .should('eq', 'https://dev.digital-office.dso.lanit-tercom.com/time')
        cy.intercept('PATCH', '/worktime/edit*')
            .as('wt-edited')
        cy.get('do-projects table tr')
            .should('have.length.greaterThan', 1)
            .its('length')
            .then(length => {
                let l = length;
                cy.log(l)      // показывает количество найденных элементов
                let k = Cypress._.random(0, l - 2) //-2, subtract the array number and header row
                cy.log(k)
                cy.get('do-projects table td > button') //nesting > excludes comment reversal buttons
                    .eq(k)
                    .click({ force: true })
            })
        cy.get('div[class="dialog-content"]')
            .should('be.visible')
        cy.get('input[formcontrolname="userHours"]')
            .clear()
            .type(Cypress._.random(5, 50))
        cy.get('button[data-test*="edit"]')
            .should('be.visible')
            .click()
        cy.wait('@wt-edited')
            .its('response.statusCode').should('eq', 200)
    });

    it("DOW-31", () => {
        cy.url()
            .should('eq', 'https://dev.digital-office.dso.lanit-tercom.com/time')
        cy.intercept('PATCH', '/worktime/edit*')
            .as('wt-edited')
        cy.get('do-projects table td > button')
            .eq(0)
            .click({ force: true })
        cy.get('div[class="dialog-content"]')
            .should('be.visible')
        cy.get('textarea[formcontrolname="description"]')
            .clear()
        cy.get('button[data-test*="edit"]')
            .should('be.visible')
            .click()
        cy.get('textarea[formcontrolname="description"]')
            .invoke('val')
            .and('eq', '')
        cy.wait('@wt-edited')
            .its('response.statusCode').should('eq', 200)
        cy.wait(500)                        //it helps to resolve some problems
    });

    it("DOW-25", () => {
        cy.url()
            .should('eq', 'https://dev.digital-office.dso.lanit-tercom.com/time')
        cy.intercept('PATCH', '/worktime/edit*')
            .as('wt-edited')
        cy.get('do-projects table td > button')
            .eq(0)
            .click({ force: true })
        cy.get('div[class="dialog-content"]')
            .should('be.visible')
        cy.get('textarea[formcontrolname="description"]')
            .type(makeText(40))
        cy.get('button[data-test*="edit"]')
            .should('be.visible')
            .click()
        cy.wait('@wt-edited')
            .its('response.statusCode').should('eq', 200)
    });

    it("DOW-26", () => {
        cy.url()
            .should('eq', 'https://dev.digital-office.dso.lanit-tercom.com/time')
        cy.intercept('PATCH', '/worktime/edit*')
            .as('wt-edited')
        cy.get('do-projects table td > button')
            .eq(0)                                         //select the project with comment filled in the DOW-25
            .click({ force: true })
        cy.get('div[class="dialog-content"]')
            .should('be.visible')
        cy.get('textarea[formcontrolname="description"]')
            .type(makeRuName(30))
        cy.get('button[data-test*="edit"]')
            .should('be.visible')
            .click()
        cy.wait('@wt-edited')
            .its('response.statusCode').should('eq', 200)
    });

    it("DOW-27", () => {
        cy.url()
            .should('eq', 'https://dev.digital-office.dso.lanit-tercom.com/time')
        cy.intercept('PATCH', '/worktime/edit*')
            .as('wt-edited')
        cy.get('do-projects table tr')
            .should('have.length.greaterThan', 1)
            .its('length')
            .then(length => {
                let l = length;
                cy.log(l)
                let k = Cypress._.random(0, l - 2)
                cy.log(k)
                cy.get('do-projects table td > button')
                    .eq(k)
                    .click({ force: true })
            })
        cy.get('div[class="dialog-content"]')
            .should('be.visible')
        cy.get('input[formcontrolname="userHours"]')
            .clear()
            .type(Cypress._.random(5, 50))
        cy.get('textarea[formcontrolname="description"]')
            .clear()
            .type(makeRuName(40))
        cy.get('button[data-test*="edit"]')
            .should('be.visible')
            .click()
        cy.wait('@wt-edited')
            .its('response.statusCode').should('eq', 200)
    });

    it("DOW-28", () => {
        cy.url()
            .should('eq', 'https://dev.digital-office.dso.lanit-tercom.com/time')
        cy.get('do-projects table tr')
            .should('have.length.greaterThan', 1)
            .its('length')
            .then(length => {
                let l = length;
                cy.log(l)
                let k = Cypress._.random(0, l - 2)
                cy.log(k)
                cy.get('do-projects table td > button')
                    .eq(k)
                    .click({ force: true })
            })
        cy.get('div[class="dialog-content"]')
            .should('be.visible')
        cy.get('input[formcontrolname="userHours"]')
            .clear()
            .type(Cypress._.random(5, 50))
        cy.get('textarea[formcontrolname="description"]')
            .clear()
            .type(makeRuName(40))
        cy.get('button[data-test*="close-dialog-btn"]')
            .should('be.visible')
            .click()
    });

    it("DOW-29", () => {
        cy.url()
            .should('eq', 'https://dev.digital-office.dso.lanit-tercom.com/time')
        cy.get('do-projects table tr')
            .should('have.length.greaterThan', 1)
            .its('length')
            .then(length => {
                let l = length;
                cy.log(l)
                let k = Cypress._.random(0, l - 2)
                cy.log(k)
                cy.get('do-projects table td > button')
                    .eq(k)
                    .click({ force: true })
            })
        cy.get('div[class="dialog-content"]')
            .should('be.visible')
        cy.get('input[formcontrolname="userHours"]')
            .clear()
            .type(makeRuName(10))
        cy.get('input[formcontrolname="userHours"]')
            .invoke('val')
            .and('eq', '')
        cy.get('button[data-test*="edit"]')
            .click()
        cy.get('do-form-field[label="Количество часов"] mat-error')
            .invoke('prop', 'innerText')
            .should('eq', 'Обязательно для заполнения')
        cy.get('do-form-field[label="Количество часов"] mat-error')
            .should('be.visible')
        cy.get('button[data-test*="close-dialog-btn"]')
            .should('be.visible')
            .click()
    });

    it("DOW-30", () => {
        cy.url()
            .should('eq', 'https://dev.digital-office.dso.lanit-tercom.com/time')
        cy.get('do-projects table tr')
            .should('have.length.greaterThan', 1)
            .its('length')
            .then(length => {
                let l = length;
                cy.log(l)
                let k = Cypress._.random(0, l - 2)
                cy.log(k)
                cy.get('do-projects table td > button')
                    .eq(k)
                    .click({ force: true })
            })
        cy.get('div[class="dialog-content"]')
            .should('be.visible')
        cy.get('input[formcontrolname="userHours"]')
            .clear()
            .type('!@#$%^^&&*(()_+~')
        cy.get('input[formcontrolname="userHours"]')
            .invoke('val')
            .and('eq', '')
        cy.get('button[data-test*="edit"]')
            .click()
        cy.get('do-form-field[label="Количество часов"] mat-error')
            .invoke('prop', 'innerText')
            .should('eq', 'Обязательно для заполнения')
        cy.get('do-form-field[label="Количество часов"] mat-error')
            .should('be.visible')
        cy.get('button[data-test*="close-dialog-btn"]')
            .should('be.visible')
            .click()
    });

});  
